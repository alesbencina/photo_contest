<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Core\Cache\Cache;

/**
 * @param $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *
 * @return string
 */
function photo_contest_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the photo_contest module.
    case 'help.page.photo_contest':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Photo contest') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function photo_contest_theme() {
  return [
    'photo_contest' => [
      'render element' => 'children',
    ],
    'photo_contest_entity_vote_statistic' => [
      'variables' => [
        'num_of_votes' => NULL,
        'average' => NULL,
      ],
      'template' => 'photo-vote-result',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function photo_contest_form_node_photo_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#cache']['tags'] = [
    'account_add_photo_link',
  ];
  $form['#prefix'] = "<div id=\"{$form_id}-wrapper\">";
  $form['#suffix'] = '</div>';

  $form['actions']['submit']['#ajax'] = [
    'wrapper' => $form_id . '-wrapper',
    'callback' => 'ajaxRebuildCallback',
    'effect' => 'fade',
  ];
}

/**
 * Implements hook_preprocess_page(&$variables).
 *
 * @param $variables
 */
function photo_contest_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'photo_contest/drupal.dialog.ajax';
}

/**
 * Callback function for add photo form.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array|\Drupal\Core\Ajax\AjaxResponse
 */
function ajaxRebuildCallback(array $form, FormStateInterface $form_state) {
  if (count($form_state->getErrors()) > 0) {
    return $form;
  }
  $response = new AjaxResponse();

  $photoService = \Drupal::service('photo_contest.photo_service');
  if ($photoService->checkUserPosts()) {
    $response->addCommand(new RemoveCommand('#link_add_photo'));
  }
  $command = new CloseModalDialogCommand();
  $response->addCommand(new \Drupal\Core\Ajax\RedirectCommand('/photos'));

  $response->addCommand($command);
  Cache::invalidateTags(['account_add_photo_link']);

  return $response;
}


/**
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param array $context
 */
function photo_contest_entity_view_display_alter(\Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, array $context) {
  if ($context['bundle'] == 'photo' && $context['view_mode'] == 'teaser' || $context['view_mode'] == 'full') {
    $user_roles = \Drupal::currentUser()->getRoles();
    $target = ['adminstrator', 'jury'];
    // at least one of $target is in $haystack
    if (count(array_intersect($target, $user_roles)) <= 0) {
      $display->removeComponent('field_vote');
    }
  }

  if ($context['bundle'] == 'photo' && $context['view_mode'] == 'admin_contest_overview') {
    $display->removeComponent('field_vote');
  }
}
